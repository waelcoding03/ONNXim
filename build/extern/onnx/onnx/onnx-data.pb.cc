// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data.proto

#include "onnx/onnx-data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onnx {
constexpr SequenceProto::SequenceProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensor_values_()
  , sparse_tensor_values_()
  , sequence_values_()
  , map_values_()
  , optional_values_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , elem_type_(0){}
struct SequenceProtoDefaultTypeInternal {
  constexpr SequenceProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SequenceProtoDefaultTypeInternal() {}
  union {
    SequenceProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SequenceProtoDefaultTypeInternal _SequenceProto_default_instance_;
constexpr MapProto::MapProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , string_keys_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , values_(nullptr)
  , key_type_(0){}
struct MapProtoDefaultTypeInternal {
  constexpr MapProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapProtoDefaultTypeInternal() {}
  union {
    MapProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapProtoDefaultTypeInternal _MapProto_default_instance_;
constexpr OptionalProto::OptionalProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tensor_value_(nullptr)
  , sparse_tensor_value_(nullptr)
  , sequence_value_(nullptr)
  , map_value_(nullptr)
  , optional_value_(nullptr)
  , elem_type_(0){}
struct OptionalProtoDefaultTypeInternal {
  constexpr OptionalProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OptionalProtoDefaultTypeInternal() {}
  union {
    OptionalProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OptionalProtoDefaultTypeInternal _OptionalProto_default_instance_;
}  // namespace onnx
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onnx_2fonnx_2ddata_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onnx_2fonnx_2ddata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_onnx_2fonnx_2ddata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, name_),
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, elem_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, tensor_values_),
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, sparse_tensor_values_),
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, sequence_values_),
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, map_values_),
  PROTOBUF_FIELD_OFFSET(::onnx::SequenceProto, optional_values_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::MapProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onnx::MapProto, name_),
  PROTOBUF_FIELD_OFFSET(::onnx::MapProto, key_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::MapProto, keys_),
  PROTOBUF_FIELD_OFFSET(::onnx::MapProto, string_keys_),
  PROTOBUF_FIELD_OFFSET(::onnx::MapProto, values_),
  0,
  2,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, name_),
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, elem_type_),
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, tensor_value_),
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, sparse_tensor_value_),
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, sequence_value_),
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, map_value_),
  PROTOBUF_FIELD_OFFSET(::onnx::OptionalProto, optional_value_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::onnx::SequenceProto)},
  { 20, 31, -1, sizeof(::onnx::MapProto)},
  { 36, 49, -1, sizeof(::onnx::OptionalProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onnx::_SequenceProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onnx::_MapProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onnx::_OptionalProto_default_instance_),
};

const char descriptor_table_protodef_onnx_2fonnx_2ddata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024onnx/onnx-data.proto\022\004onnx\032\022onnx/onnx-"
  "ml.proto\"\360\002\n\rSequenceProto\022\014\n\004name\030\001 \001(\t"
  "\022\021\n\telem_type\030\002 \001(\005\022(\n\rtensor_values\030\003 \003"
  "(\0132\021.onnx.TensorProto\0225\n\024sparse_tensor_v"
  "alues\030\004 \003(\0132\027.onnx.SparseTensorProto\022,\n\017"
  "sequence_values\030\005 \003(\0132\023.onnx.SequencePro"
  "to\022\"\n\nmap_values\030\006 \003(\0132\016.onnx.MapProto\022,"
  "\n\017optional_values\030\007 \003(\0132\023.onnx.OptionalP"
  "roto\"]\n\010DataType\022\r\n\tUNDEFINED\020\000\022\n\n\006TENSO"
  "R\020\001\022\021\n\rSPARSE_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007\n\003"
  "MAP\020\004\022\014\n\010OPTIONAL\020\005\"r\n\010MapProto\022\014\n\004name\030"
  "\001 \001(\t\022\020\n\010key_type\030\002 \001(\005\022\014\n\004keys\030\003 \003(\003\022\023\n"
  "\013string_keys\030\004 \003(\014\022#\n\006values\030\005 \001(\0132\023.onn"
  "x.SequenceProto\"\353\002\n\rOptionalProto\022\014\n\004nam"
  "e\030\001 \001(\t\022\021\n\telem_type\030\002 \001(\005\022\'\n\014tensor_val"
  "ue\030\003 \001(\0132\021.onnx.TensorProto\0224\n\023sparse_te"
  "nsor_value\030\004 \001(\0132\027.onnx.SparseTensorProt"
  "o\022+\n\016sequence_value\030\005 \001(\0132\023.onnx.Sequenc"
  "eProto\022!\n\tmap_value\030\006 \001(\0132\016.onnx.MapProt"
  "o\022+\n\016optional_value\030\007 \001(\0132\023.onnx.Optiona"
  "lProto\"]\n\010DataType\022\r\n\tUNDEFINED\020\000\022\n\n\006TEN"
  "SOR\020\001\022\021\n\rSPARSE_TENSOR\020\002\022\014\n\010SEQUENCE\020\003\022\007"
  "\n\003MAP\020\004\022\014\n\010OPTIONAL\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onnx_2fonnx_2ddata_2eproto_deps[1] = {
  &::descriptor_table_onnx_2fonnx_2dml_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onnx_2fonnx_2ddata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onnx_2fonnx_2ddata_2eproto = {
  false, false, 901, descriptor_table_protodef_onnx_2fonnx_2ddata_2eproto, "onnx/onnx-data.proto", 
  &descriptor_table_onnx_2fonnx_2ddata_2eproto_once, descriptor_table_onnx_2fonnx_2ddata_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_onnx_2fonnx_2ddata_2eproto::offsets,
  file_level_metadata_onnx_2fonnx_2ddata_2eproto, file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto, file_level_service_descriptors_onnx_2fonnx_2ddata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onnx_2fonnx_2ddata_2eproto_getter() {
  return &descriptor_table_onnx_2fonnx_2ddata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onnx_2fonnx_2ddata_2eproto(&descriptor_table_onnx_2fonnx_2ddata_2eproto);
namespace onnx {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceProto_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2fonnx_2ddata_2eproto);
  return file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto[0];
}
bool SequenceProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SequenceProto_DataType SequenceProto::UNDEFINED;
constexpr SequenceProto_DataType SequenceProto::TENSOR;
constexpr SequenceProto_DataType SequenceProto::SPARSE_TENSOR;
constexpr SequenceProto_DataType SequenceProto::SEQUENCE;
constexpr SequenceProto_DataType SequenceProto::MAP;
constexpr SequenceProto_DataType SequenceProto::OPTIONAL;
constexpr SequenceProto_DataType SequenceProto::DataType_MIN;
constexpr SequenceProto_DataType SequenceProto::DataType_MAX;
constexpr int SequenceProto::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionalProto_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onnx_2fonnx_2ddata_2eproto);
  return file_level_enum_descriptors_onnx_2fonnx_2ddata_2eproto[1];
}
bool OptionalProto_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OptionalProto_DataType OptionalProto::UNDEFINED;
constexpr OptionalProto_DataType OptionalProto::TENSOR;
constexpr OptionalProto_DataType OptionalProto::SPARSE_TENSOR;
constexpr OptionalProto_DataType OptionalProto::SEQUENCE;
constexpr OptionalProto_DataType OptionalProto::MAP;
constexpr OptionalProto_DataType OptionalProto::OPTIONAL;
constexpr OptionalProto_DataType OptionalProto::DataType_MIN;
constexpr OptionalProto_DataType OptionalProto::DataType_MAX;
constexpr int OptionalProto::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SequenceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SequenceProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void SequenceProto::clear_tensor_values() {
  tensor_values_.Clear();
}
void SequenceProto::clear_sparse_tensor_values() {
  sparse_tensor_values_.Clear();
}
SequenceProto::SequenceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tensor_values_(arena),
  sparse_tensor_values_(arena),
  sequence_values_(arena),
  map_values_(arena),
  optional_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onnx.SequenceProto)
}
SequenceProto::SequenceProto(const SequenceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tensor_values_(from.tensor_values_),
      sparse_tensor_values_(from.sparse_tensor_values_),
      sequence_values_(from.sequence_values_),
      map_values_(from.map_values_),
      optional_values_(from.optional_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  elem_type_ = from.elem_type_;
  // @@protoc_insertion_point(copy_constructor:onnx.SequenceProto)
}

void SequenceProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
elem_type_ = 0;
}

SequenceProto::~SequenceProto() {
  // @@protoc_insertion_point(destructor:onnx.SequenceProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SequenceProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SequenceProto::ArenaDtor(void* object) {
  SequenceProto* _this = reinterpret_cast< SequenceProto* >(object);
  (void)_this;
}
void SequenceProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SequenceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SequenceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.SequenceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_values_.Clear();
  sparse_tensor_values_.Clear();
  sequence_values_.Clear();
  map_values_.Clear();
  optional_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  elem_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SequenceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onnx.SequenceProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 elem_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_elem_type(&has_bits);
          elem_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.TensorProto tensor_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sparse_tensor_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.SequenceProto sequence_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequence_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.MapProto map_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onnx.OptionalProto optional_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_optional_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SequenceProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.SequenceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.SequenceProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 elem_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_elem_type(), target);
  }

  // repeated .onnx.TensorProto tensor_values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensor_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tensor_values(i), target, stream);
  }

  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sparse_tensor_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sparse_tensor_values(i), target, stream);
  }

  // repeated .onnx.SequenceProto sequence_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sequence_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sequence_values(i), target, stream);
  }

  // repeated .onnx.MapProto map_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_map_values(i), target, stream);
  }

  // repeated .onnx.OptionalProto optional_values = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_optional_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_optional_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.SequenceProto)
  return target;
}

size_t SequenceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.SequenceProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.TensorProto tensor_values = 3;
  total_size += 1UL * this->_internal_tensor_values_size();
  for (const auto& msg : this->tensor_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  total_size += 1UL * this->_internal_sparse_tensor_values_size();
  for (const auto& msg : this->sparse_tensor_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.SequenceProto sequence_values = 5;
  total_size += 1UL * this->_internal_sequence_values_size();
  for (const auto& msg : this->sequence_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.MapProto map_values = 6;
  total_size += 1UL * this->_internal_map_values_size();
  for (const auto& msg : this->map_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onnx.OptionalProto optional_values = 7;
  total_size += 1UL * this->_internal_optional_values_size();
  for (const auto& msg : this->optional_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 elem_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_elem_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SequenceProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SequenceProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SequenceProto::GetClassData() const { return &_class_data_; }

void SequenceProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SequenceProto *>(to)->MergeFrom(
      static_cast<const SequenceProto &>(from));
}


void SequenceProto::MergeFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.SequenceProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_values_.MergeFrom(from.tensor_values_);
  sparse_tensor_values_.MergeFrom(from.sparse_tensor_values_);
  sequence_values_.MergeFrom(from.sequence_values_);
  map_values_.MergeFrom(from.map_values_);
  optional_values_.MergeFrom(from.optional_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      elem_type_ = from.elem_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SequenceProto::CopyFrom(const SequenceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.SequenceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceProto::IsInitialized() const {
  return true;
}

void SequenceProto::InternalSwap(SequenceProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tensor_values_.InternalSwap(&other->tensor_values_);
  sparse_tensor_values_.InternalSwap(&other->sparse_tensor_values_);
  sequence_values_.InternalSwap(&other->sequence_values_);
  map_values_.InternalSwap(&other->map_values_);
  optional_values_.InternalSwap(&other->optional_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(elem_type_, other->elem_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SequenceProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onnx_2fonnx_2ddata_2eproto_getter, &descriptor_table_onnx_2fonnx_2ddata_2eproto_once,
      file_level_metadata_onnx_2fonnx_2ddata_2eproto[0]);
}

// ===================================================================

class MapProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MapProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::onnx::SequenceProto& values(const MapProto* msg);
  static void set_has_values(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx::SequenceProto&
MapProto::_Internal::values(const MapProto* msg) {
  return *msg->values_;
}
MapProto::MapProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena),
  string_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onnx.MapProto)
}
MapProto::MapProto(const MapProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keys_(from.keys_),
      string_keys_(from.string_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_values()) {
    values_ = new ::onnx::SequenceProto(*from.values_);
  } else {
    values_ = nullptr;
  }
  key_type_ = from.key_type_;
  // @@protoc_insertion_point(copy_constructor:onnx.MapProto)
}

void MapProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&values_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_type_) -
    reinterpret_cast<char*>(&values_)) + sizeof(key_type_));
}

MapProto::~MapProto() {
  // @@protoc_insertion_point(destructor:onnx.MapProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete values_;
}

void MapProto::ArenaDtor(void* object) {
  MapProto* _this = reinterpret_cast< MapProto* >(object);
  (void)_this;
}
void MapProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.MapProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  string_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(values_ != nullptr);
      values_->Clear();
    }
  }
  key_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onnx.MapProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 key_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_key_type(&has_bits);
          key_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes string_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.SequenceProto values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_values(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.MapProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.MapProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 key_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_key_type(), target);
  }

  // repeated int64 keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_keys(i), target);
  }

  // repeated bytes string_keys = 4;
  for (int i = 0, n = this->_internal_string_keys_size(); i < n; i++) {
    const auto& s = this->_internal_string_keys(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional .onnx.SequenceProto values = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.MapProto)
  return target;
}

size_t MapProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.MapProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 keys = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->keys_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keys_size());
    total_size += data_size;
  }

  // repeated bytes string_keys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_keys_.size());
  for (int i = 0, n = string_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      string_keys_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .onnx.SequenceProto values = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *values_);
    }

    // optional int32 key_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapProto::GetClassData() const { return &_class_data_; }

void MapProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapProto *>(to)->MergeFrom(
      static_cast<const MapProto &>(from));
}


void MapProto::MergeFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.MapProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  string_keys_.MergeFrom(from.string_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_values()->::onnx::SequenceProto::MergeFrom(from._internal_values());
    }
    if (cached_has_bits & 0x00000004u) {
      key_type_ = from.key_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapProto::CopyFrom(const MapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.MapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapProto::IsInitialized() const {
  return true;
}

void MapProto::InternalSwap(MapProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  string_keys_.InternalSwap(&other->string_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapProto, key_type_)
      + sizeof(MapProto::key_type_)
      - PROTOBUF_FIELD_OFFSET(MapProto, values_)>(
          reinterpret_cast<char*>(&values_),
          reinterpret_cast<char*>(&other->values_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onnx_2fonnx_2ddata_2eproto_getter, &descriptor_table_onnx_2fonnx_2ddata_2eproto_once,
      file_level_metadata_onnx_2fonnx_2ddata_2eproto[1]);
}

// ===================================================================

class OptionalProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::onnx::TensorProto& tensor_value(const OptionalProto* msg);
  static void set_has_tensor_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::onnx::SparseTensorProto& sparse_tensor_value(const OptionalProto* msg);
  static void set_has_sparse_tensor_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::onnx::SequenceProto& sequence_value(const OptionalProto* msg);
  static void set_has_sequence_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::onnx::MapProto& map_value(const OptionalProto* msg);
  static void set_has_map_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::onnx::OptionalProto& optional_value(const OptionalProto* msg);
  static void set_has_optional_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::onnx::TensorProto&
OptionalProto::_Internal::tensor_value(const OptionalProto* msg) {
  return *msg->tensor_value_;
}
const ::onnx::SparseTensorProto&
OptionalProto::_Internal::sparse_tensor_value(const OptionalProto* msg) {
  return *msg->sparse_tensor_value_;
}
const ::onnx::SequenceProto&
OptionalProto::_Internal::sequence_value(const OptionalProto* msg) {
  return *msg->sequence_value_;
}
const ::onnx::MapProto&
OptionalProto::_Internal::map_value(const OptionalProto* msg) {
  return *msg->map_value_;
}
const ::onnx::OptionalProto&
OptionalProto::_Internal::optional_value(const OptionalProto* msg) {
  return *msg->optional_value_;
}
void OptionalProto::clear_tensor_value() {
  if (tensor_value_ != nullptr) tensor_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void OptionalProto::clear_sparse_tensor_value() {
  if (sparse_tensor_value_ != nullptr) sparse_tensor_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
OptionalProto::OptionalProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onnx.OptionalProto)
}
OptionalProto::OptionalProto(const OptionalProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tensor_value()) {
    tensor_value_ = new ::onnx::TensorProto(*from.tensor_value_);
  } else {
    tensor_value_ = nullptr;
  }
  if (from._internal_has_sparse_tensor_value()) {
    sparse_tensor_value_ = new ::onnx::SparseTensorProto(*from.sparse_tensor_value_);
  } else {
    sparse_tensor_value_ = nullptr;
  }
  if (from._internal_has_sequence_value()) {
    sequence_value_ = new ::onnx::SequenceProto(*from.sequence_value_);
  } else {
    sequence_value_ = nullptr;
  }
  if (from._internal_has_map_value()) {
    map_value_ = new ::onnx::MapProto(*from.map_value_);
  } else {
    map_value_ = nullptr;
  }
  if (from._internal_has_optional_value()) {
    optional_value_ = new ::onnx::OptionalProto(*from.optional_value_);
  } else {
    optional_value_ = nullptr;
  }
  elem_type_ = from.elem_type_;
  // @@protoc_insertion_point(copy_constructor:onnx.OptionalProto)
}

void OptionalProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tensor_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elem_type_) -
    reinterpret_cast<char*>(&tensor_value_)) + sizeof(elem_type_));
}

OptionalProto::~OptionalProto() {
  // @@protoc_insertion_point(destructor:onnx.OptionalProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OptionalProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_value_;
  if (this != internal_default_instance()) delete sparse_tensor_value_;
  if (this != internal_default_instance()) delete sequence_value_;
  if (this != internal_default_instance()) delete map_value_;
  if (this != internal_default_instance()) delete optional_value_;
}

void OptionalProto::ArenaDtor(void* object) {
  OptionalProto* _this = reinterpret_cast< OptionalProto* >(object);
  (void)_this;
}
void OptionalProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionalProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OptionalProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OptionalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tensor_value_ != nullptr);
      tensor_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sparse_tensor_value_ != nullptr);
      sparse_tensor_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sequence_value_ != nullptr);
      sequence_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(map_value_ != nullptr);
      map_value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optional_value_ != nullptr);
      optional_value_->Clear();
    }
  }
  elem_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onnx.OptionalProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 elem_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_elem_type(&has_bits);
          elem_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.TensorProto tensor_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sparse_tensor_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.SequenceProto sequence_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequence_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.MapProto map_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .onnx.OptionalProto optional_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionalProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.OptionalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "onnx.OptionalProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 elem_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_elem_type(), target);
  }

  // optional .onnx.TensorProto tensor_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tensor_value(this), target, stream);
  }

  // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sparse_tensor_value(this), target, stream);
  }

  // optional .onnx.SequenceProto sequence_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sequence_value(this), target, stream);
  }

  // optional .onnx.MapProto map_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::map_value(this), target, stream);
  }

  // optional .onnx.OptionalProto optional_value = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::optional_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.OptionalProto)
  return target;
}

size_t OptionalProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OptionalProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .onnx.TensorProto tensor_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tensor_value_);
    }

    // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sparse_tensor_value_);
    }

    // optional .onnx.SequenceProto sequence_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sequence_value_);
    }

    // optional .onnx.MapProto map_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_value_);
    }

    // optional .onnx.OptionalProto optional_value = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_value_);
    }

    // optional int32 elem_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_elem_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionalProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OptionalProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionalProto::GetClassData() const { return &_class_data_; }

void OptionalProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OptionalProto *>(to)->MergeFrom(
      static_cast<const OptionalProto &>(from));
}


void OptionalProto::MergeFrom(const OptionalProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onnx.OptionalProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tensor_value()->::onnx::TensorProto::MergeFrom(from._internal_tensor_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sparse_tensor_value()->::onnx::SparseTensorProto::MergeFrom(from._internal_sparse_tensor_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_sequence_value()->::onnx::SequenceProto::MergeFrom(from._internal_sequence_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_map_value()->::onnx::MapProto::MergeFrom(from._internal_map_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_optional_value()->::onnx::OptionalProto::MergeFrom(from._internal_optional_value());
    }
    if (cached_has_bits & 0x00000040u) {
      elem_type_ = from.elem_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionalProto::CopyFrom(const OptionalProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OptionalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalProto::IsInitialized() const {
  return true;
}

void OptionalProto::InternalSwap(OptionalProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OptionalProto, elem_type_)
      + sizeof(OptionalProto::elem_type_)
      - PROTOBUF_FIELD_OFFSET(OptionalProto, tensor_value_)>(
          reinterpret_cast<char*>(&tensor_value_),
          reinterpret_cast<char*>(&other->tensor_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onnx_2fonnx_2ddata_2eproto_getter, &descriptor_table_onnx_2fonnx_2ddata_2eproto_once,
      file_level_metadata_onnx_2fonnx_2ddata_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onnx::SequenceProto* Arena::CreateMaybeMessage< ::onnx::SequenceProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::SequenceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::MapProto* Arena::CreateMaybeMessage< ::onnx::MapProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::MapProto >(arena);
}
template<> PROTOBUF_NOINLINE ::onnx::OptionalProto* Arena::CreateMaybeMessage< ::onnx::OptionalProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onnx::OptionalProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
